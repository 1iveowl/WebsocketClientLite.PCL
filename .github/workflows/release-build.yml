
name: Publish Package

on:
  # create:
  #   branches:
  #     - release/**
  push:
    branches: 
      - 'master'
  pull_request:
    branches: 
      - 'master'
      - 'develop'
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.x.x'

      - name: Install gitversion
        uses: gittools/actions/gitversion/setup@v0.9.13
        with:
          versionSpec: '5.x'

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determin version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.13
        with:
          useConfigFile: true

      - name: Restore
        run: dotnet restore
        working-directory: src/main/

      - name: Build .NET
        run: dotnet build WebsocketClientLite.sln --configuration release /p:Version=${{ steps.gitversion.outputs.MajorMinorPatch }} /p:AssemblyVersion=${{ steps.gitversion.outputs.AssemblySemVer }} /p:InformationalVersion=${{ steps.gitversion.outputs.InformationalVersion }} --no-restore
        working-directory: src/main/

      - name: Pack WebsocketClientLite
        run: dotnet pack WebsocketClientLite.csproj -c Release --no-build
        working-directory: src/main/WebsocketClientLite/

      - name: Pack IWebsocketClientLite (Interface)
        run: dotnet pack IWebsocketClientLite.csproj -c Release --no-build
        working-directory: src/interface/IWebsocketClientLite/

      - name: Prep packages
        run: dotnet nuget add source --username 1iveowl --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/1iveowl/index.json"

      - name: Publish WebsocketClientLite to GitHub packages 
        run: dotnet nuget push *.nupkg --api-key ${{ secrets.GITHUB_TOKEN }}  --source "github"
        working-directory: src/main/WebsocketClientLite/bin/Release/

      - name: Publish IWebsocketClientLite (interface) to GitHub packages 
        run: dotnet nuget push *.nupkg --api-key ${{ secrets.GITHUB_TOKEN }}  --source "github"
        working-directory: src/interface/IWebsocketClientLite/bin/Release/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.gitversion.outputs.AssemblySemVer }}
          release_name: Release ${{ steps.gitversion.outputs.AssemblySemVer }}
          body: |
            Changes in this Release
            - Test 1
            - Test 1
          draft: true
          prerelease: true    

      # - name: Determin version
      #   id: gitversion
      #   uses: gittools/actions/gitversion/setup@v0.9.7
        # with:
        #   versionSpec: '5.x'
        #   useConfigFile: true
        #   configFilePath: GitVersion.yml
        #   additionalArguments: '/showConfig'     
      # - name: Display GitVersion outputs
      #   run: |
      #     echo "Major: ${{ steps.gitversion.outputs.major }}"
      #     echo "Minor: ${{ steps.gitversion.outputs.minor }}"
      #     echo "Patch: ${{ steps.gitversion.outputs.patch }}"
      #     echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
      #     echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
      #     echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
      #     echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
      #     echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
      #     echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
      #     echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
      #     echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
      #     echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
      #     echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
      #     echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
      #     echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
      #     echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
      #     echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
      #     echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
      #     echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
      #     echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
      #     echo "Sha: ${{ steps.gitversion.outputs.sha }}"
      #     echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
      #     echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
      #     echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
      #     echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
      #     echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
      #     echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
      #     echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
      #     echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
      #     echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
  # display-version:
  #   name: Display version
  #   runs-on: ubuntu-latest
  #   needs: calculate-version
  #   env:
  #     VERSION: ${{ needs.calculate-version.outputs.branchName }}
  #   steps:
  #     - name: Display version
  #       run:
  #         echo Ver $VERSION


  # env:
  #   BUILD_CONFIG: 'Release'
  #   SOLUTION: 'WebsocketClientLite.sln'

  # steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0




    # - name: Setup NuGet
    #   uses: NuGet/setup-nuget@v1.0.5

    # - name: Restore dependencies
    #   run: nuget restore $SOLUTION

    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: 3.1.x

    # - name: Build
    #   run: dotnet build $SOLUTION --configuration $BUILD_CONFIG --no-restore

    # - name: Run tests
    #   run: dotnet test /p:Configuration=$env:BUILD_CONFIG --no-restore --no-build --verbosity normal